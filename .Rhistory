}
log_likeli_rho_u <- function(rho_u, residual, sigma_squ_u, #sigma_squ_v, rho_w, sigma_squ_w,
sigma_squ_e, Z1, Z2, Z3){
cov_u <- sigma_squ_u * solve(D_region - rho_u*adj_matrix_spase)
# cov_w <- sigma_squ_w * solve(D_micro - rho_w*adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1,  cov_u = cov_u, Z2 = Z2,
# sigma_squ_v = sigma_squ_v,
# Z3 = Z3, cov_w = cov_w,
sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual, Z1, Q1_inv=cov_u, Z2, #sigma_squ_v, Z3, Q3_inv=cov_w,
sigma_squ_e)
# penalty <- -log(1 - rho_u + 1e-6)  # Barrier penalty
penalty <- -log(rho_u + 1e-6) - log(1 - rho_u + 1e-6)
res <- as.numeric(approx_logdet + resi_V_inv_resi + penalty)
return(res)
}
opt_rho_u <- optim(0.6, log_likeli_rho_u,
method = "L-BFGS-B", lower = 1e-6, upper = 1-1e-6,
residual = residual,
sigma_squ_u = est_sigma_squ_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1,  cov_u = cov_u, Z2 = Z2,
# sigma_squ_v = sigma_squ_v,
# Z3 = Z3, cov_w = cov_w,
sigma_squ_e = sigma_squ_e)
Vinv_matvec(residual, Z1, Q1_inv=cov_u, Z2, #sigma_squ_v, Z3, Q3_inv=cov_w,
sigma_squ_e)
Vinv_matvec
# Function to compute V^{-1} %*% b using matrix-free representation
Vinv_matvec <- function(b, Z1, Q1_inv, #Z2, sigma_squ_v, Z3, Q3_inv,
sigma_squ_e) {
# cat("length(b):", length(b), "\n")
# cat("dim(Z1):", dim(Z1), "\n")
# cat("dim(Z2):", dim(Z2), "\n")
# cat("dim(Z3):", dim(Z3), "\n")
V_matvec <- function(x) {
out <- Z1 %*% (Q1_inv %*% (t(Z1) %*% x)) +
# sigma_squ_v * (Z2 %*% (t(Z2) %*% x)) +
# Z3 %*% (Q3_inv %*% (t(Z3) %*% x)) +
sigma_squ_e * Diagonal(n*J) %*% x
# ridge_eps * x  # <-- stabilizing term
return(out)
}
# V_matvec <- function(x) {
#   out1 <- Z1 %*% (Q1_inv %*% (t(Z1) %*% x))
#   out2 <- sigma2 * (Z2 %*% (t(Z2) %*% x))
#   out3 <- Z3 %*% (Q3_inv %*% (t(Z3) %*% x))
#   out <- out1 + out2 + out3
#
#   cat("norm(out1):", norm(out1, "2"),
#       "norm(out2):", norm(out2, "2"),
#       "norm(out3):", norm(out3, "2"), "\n")
#
#   return(out)
# }
# Use conjugate gradient to solve V x = r without forming V
tol <- 1e-6
maxit <- 1000
x0 <- rep(0, dim(Z1)[1])
res <- pcg_solver(Afun = V_matvec, b=b, x0 = x0, tol = tol, maxiter = maxit)
return(res$x)  # V^{-1} r
}
opt_rho_u <- optim(0.6, log_likeli_rho_u,
method = "L-BFGS-B", lower = 1e-6, upper = 1-1e-6,
residual = residual,
sigma_squ_u = est_sigma_squ_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
# Function to compute V^{-1} %*% b using matrix-free representation
Vinv_matvec <- function(b, Z1, Q1_inv, #Z2, sigma_squ_v, Z3, Q3_inv,
sigma_squ_e) {
# cat("length(b):", length(b), "\n")
# cat("dim(Z1):", dim(Z1), "\n")
# cat("dim(Z2):", dim(Z2), "\n")
# cat("dim(Z3):", dim(Z3), "\n")
V_matvec <- function(x) {
out <- Z1 %*% (Q1_inv %*% (t(Z1) %*% x)) +
# sigma_squ_v * (Z2 %*% (t(Z2) %*% x)) +
# Z3 %*% (Q3_inv %*% (t(Z3) %*% x)) +
sigma_squ_e * Diagonal(n*J) %*% x
# ridge_eps * x  # <-- stabilizing term
return(out)
}
# V_matvec <- function(x) {
#   out1 <- Z1 %*% (Q1_inv %*% (t(Z1) %*% x))
#   out2 <- sigma2 * (Z2 %*% (t(Z2) %*% x))
#   out3 <- Z3 %*% (Q3_inv %*% (t(Z3) %*% x))
#   out <- out1 + out2 + out3
#
#   cat("norm(out1):", norm(out1, "2"),
#       "norm(out2):", norm(out2, "2"),
#       "norm(out3):", norm(out3, "2"), "\n")
#
#   return(out)
# }
# Use conjugate gradient to solve V x = r without forming V
tol <- 1e-6
maxit <- 1000
x0 <- rep(0, dim(Z1)[1])
res <- pcg_solver(Afun = V_matvec, b=b, x0 = x0, tol = tol, maxiter = maxit)
return(res$x)  # V^{-1} r
}
Vinv_matvec(residual, Z1, Q1_inv=cov_u, Z2, #sigma_squ_v, Z3, Q3_inv=cov_w,
sigma_squ_e)
log_likeli_rho_u <- function(rho_u, residual, sigma_squ_u, #sigma_squ_v, rho_w, sigma_squ_w,
sigma_squ_e, Z1, Z2, Z3){
cov_u <- sigma_squ_u * solve(D_region - rho_u*adj_matrix_spase)
# cov_w <- sigma_squ_w * solve(D_micro - rho_w*adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1,  cov_u = cov_u, Z2 = Z2,
# sigma_squ_v = sigma_squ_v,
# Z3 = Z3, cov_w = cov_w,
sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual, Z1, Q1_inv=cov_u,# Z2, #sigma_squ_v, Z3, Q3_inv=cov_w,
sigma_squ_e)
# penalty <- -log(1 - rho_u + 1e-6)  # Barrier penalty
penalty <- -log(rho_u + 1e-6) - log(1 - rho_u + 1e-6)
res <- as.numeric(approx_logdet + resi_V_inv_resi + penalty)
return(res)
}
opt_rho_u <- optim(0.6, log_likeli_rho_u,
method = "L-BFGS-B", lower = 1e-6, upper = 1-1e-6,
residual = residual,
sigma_squ_u = est_sigma_squ_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
opt_rho_u$par
-log(0.6 + 1e-6) - log(1 - 0.6 + 1e-6)
-log(1 + 1e-6) - log(1 - 1 + 1e-6)
####### adaptive lasso initial value and weights
# for initial values,  V^{-1} log(M) ~ N(Xbeta, I)
V_inv_logM <- Vinv_matvec(b = c(log_micro), Z1, cov_u, Z2, est_sigma_squ_v, Z3, cov_w,
est_sigma_squ_e)
lip_con <- lip_cons_fun(log_micro_centered, A_binary_vec,
beta1=betaA_iid_sel,
beta2=rep(0,J),
Z1, Q1_inv=cov_u, #Z2, sigma_squ_v=est_sigma_squ_v,
# Z3, Q3_inv=cov_w,
sigma_squ_e = est_sigma_squ_e)
lip_con <- lip_cons_fun(log_micro_centered, A_binary_vec,
beta1=betaA_iid_sel,
beta2=rep(0,J),
Z1, Q1_inv=cov_u, Z2, #sigma_squ_v=est_sigma_squ_v,
# Z3, Q3_inv=cov_w,
sigma_squ_e = est_sigma_squ_e)
grad_f
##################################################################################################
lip_cons_fun <- function(log_micro, A_binary_vec, beta1, beta2, Z1, Q1_inv, #Z2, sigma_squ_v, Z3, Q3_inv,
sigma_squ_e ){
grad_f1 <- grad_f(log_micro = log_micro, A_binary_vec = A_binary_vec,
est_beta = beta1, Vinv_matvec = Vinv_matvec,
Z1 = Z1, Q1_inv = Q1_inv,
# Z2 = Z2, sigma_squ_v = sigma_squ_v,
# Z3 = Z3, Q3_inv = Q3_inv,
sigma_squ_e = sigma_squ_e)
grad_f2 <- grad_f(log_micro = log_micro, A_binary_vec = A_binary_vec,
est_beta = beta2, Vinv_matvec = Vinv_matvec,
Z1 = Z1, Q1_inv = Q1_inv,
# Z2 = Z2, sigma_squ_v = sigma_squ_v,
# Z3 = Z3, Q3_inv = Q3_inv,
sigma_squ_e = sigma_squ_e
)
lip_con <- sqrt(sum((grad_f1 - grad_f2)^2))/sqrt(sum((beta1 - beta2)^2))
return(lip_con)
}
lip_con <- lip_cons_fun(log_micro_centered, A_binary_vec,
beta1=betaA_iid_sel,
beta2=rep(0,J),
Z1, Q1_inv=cov_u, Z2, #sigma_squ_v=est_sigma_squ_v,
# Z3, Q3_inv=cov_w,
sigma_squ_e = est_sigma_squ_e)
lip_con <- lip_cons_fun(log_micro_centered, A_binary_vec,
beta1=betaA_iid_sel,
beta2=rep(0,J),
Z1, Q1_inv=cov_u, #Z2, sigma_squ_v=est_sigma_squ_v,
# Z3, Q3_inv=cov_w,
sigma_squ_e = est_sigma_squ_e)
####### adaptive lasso initial value and weights
# for initial values,  V^{-1} log(M) ~ N(Xbeta, I)
V_inv_logM <- Vinv_matvec(b = c(log_micro), Z1, cov_u, #Z2, est_sigma_squ_v, Z3, cov_w,
est_sigma_squ_e)
A_long_vec <- kronecker(A_binary_vec, Diagonal(J))
glmnet_res <- cv.glmnet(x=as.matrix(A_long_vec), y=as.numeric(V_inv_logM), alpha = 1)  # no intercept, if needed
beta_init <- coef(glmnet_res, s = "lambda.min")[-1]  # Drop intercept
if(iter == 1){est_betaA <- beta_init}
epsilon <- 1e-6
weights <- 1 / (abs(beta_init) + epsilon)
# Coefficients at best lambda
est_betaA_new <- proximal_lasso(
log_micro = log_micro_centered,
A_binary_vec=A_binary_vec, est_beta=beta_init, weights=weights,
lambda = 10^5, # lambda_sel$best_lambda,
Vinv_matvec = Vinv_matvec,
step_size_init = 1 / lip_con,
Z1 = Z1, Q1_inv = cov_u,
Z2 = Z2, sigma_squ_v = est_sigma_squ_v,
Z3 = Z3, Q3_inv = cov_w,
sigma_squ_e = est_sigma_squ_e,
beta_zero_thresh = 1e-6
)
# Coefficients at best lambda
est_betaA_new <- proximal_lasso(
log_micro = log_micro_centered,
A_binary_vec=A_binary_vec, est_beta=beta_init, weights=weights,
lambda = 10^5, # lambda_sel$best_lambda,
Vinv_matvec = Vinv_matvec,
step_size_init = 1 / lip_con,
Z1 = Z1, Q1_inv = cov_u,
# Z2 = Z2, sigma_squ_v = est_sigma_squ_v,
# Z3 = Z3, Q3_inv = cov_w,
sigma_squ_e = est_sigma_squ_e,
beta_zero_thresh = 1e-6
)
which(est_betaA_new>0)
which(est_betaA_new>0) %in% sign_taxa
# Coefficients at best lambda
est_betaA_new <- proximal_lasso(
log_micro = log_micro_centered,
A_binary_vec=A_binary_vec, est_beta=beta_init, weights=weights,
lambda = 10^8, # lambda_sel$best_lambda,
Vinv_matvec = Vinv_matvec,
step_size_init = 1 / lip_con,
Z1 = Z1, Q1_inv = cov_u,
# Z2 = Z2, sigma_squ_v = est_sigma_squ_v,
# Z3 = Z3, Q3_inv = cov_w,
sigma_squ_e = est_sigma_squ_e,
beta_zero_thresh = 1e-6
)
which(est_betaA_new>0)
which(est_betaA_new>0) %in% sign_taxa
est_betaA_new[sign_taxa]
slq
log_likeli_sigma <- function(sigma_para, residual, rho_u, rho_w, Z1, Z2, Z3, sigma_squ_e) {
# if(max(sigma_para[-4]) < sigma_para[4]){res <- Inf}else{
sigma_squ_u <- sigma_para[1]
sigma_squ_v <- sigma_para[2]
sigma_squ_w <- sigma_para[3]
# sigma_squ_e <- sigma_para[4]
cov_u <- sigma_squ_u * solve(D_region - rho_u * adj_matrix_spase)
cov_w <- sigma_squ_w * solve(D_micro - rho_w * adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1, cov_u = cov_u, Z2 = Z2,
sigma_squ_v = sigma_squ_v, Z3 = Z3,
cov_w = cov_w, sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual,
Z1, Q1_inv = cov_u,
Z2, sigma_squ_v,
Z3, Q3_inv = cov_w,
sigma_squ_e)
# Optional penalty on log sigma (encourages moderate values)
# penalty <- lambda * log_sigma_squ_u^2   # mild ridge penalty
# penalty <- -log(sigma_squ_u + 1e-6)
# penalty <- log_sigma_squ_u^2
# penalty <- 1e-3 * sum(log_sigma_para^2)
# penalty <- max(0, sigma_para[4] - max(sigma_para[-4]))^2
res <- as.numeric(approx_logdet + resi_V_inv_resi ) #+ penalty)
# }
return(res)
}
st <- Sys.time()
result <- nloptr(
x0 = c(1,1),
eval_f = log_likeli_sigma,
lb = rep(log(1e-4), 2),
# ub = rep(log(100), 4),
# lb = rep(1e-6, 3), ub= rep(100, 3),
opts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 1000),
residual = residual,
rho_u = est_rho_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
# sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
log_likeli_sigma <- function(sigma_para, residual, rho_u, Z1, Z2, Z3, sigma_squ_e) {
# if(max(sigma_para[-4]) < sigma_para[4]){res <- Inf}else{
sigma_squ_u <- sigma_para[1]
sigma_squ_v <- sigma_para[2]
sigma_squ_w <- sigma_para[3]
# sigma_squ_e <- sigma_para[4]
cov_u <- sigma_squ_u * solve(D_region - rho_u * adj_matrix_spase)
cov_w <- sigma_squ_w * solve(D_micro - rho_w * adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1, cov_u = cov_u, Z2 = Z2,
sigma_squ_v = sigma_squ_v, Z3 = Z3,
cov_w = cov_w, sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual,
Z1, Q1_inv = cov_u,
Z2, sigma_squ_v,
Z3, Q3_inv = cov_w,
sigma_squ_e)
# Optional penalty on log sigma (encourages moderate values)
# penalty <- lambda * log_sigma_squ_u^2   # mild ridge penalty
# penalty <- -log(sigma_squ_u + 1e-6)
# penalty <- log_sigma_squ_u^2
# penalty <- 1e-3 * sum(log_sigma_para^2)
# penalty <- max(0, sigma_para[4] - max(sigma_para[-4]))^2
res <- as.numeric(approx_logdet + resi_V_inv_resi ) #+ penalty)
# }
return(res)
}
st <- Sys.time()
result <- nloptr(
x0 = c(1,1),
eval_f = log_likeli_sigma,
lb = rep(log(1e-4), 2),
# ub = rep(log(100), 4),
# lb = rep(1e-6, 3), ub= rep(100, 3),
opts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 1000),
residual = residual,
rho_u = est_rho_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
# sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
log_likeli_log_sigma
log_likeli_log_sigma <- function(log_sigma_para, residual, rho_u, #rho_w,
Z1, Z2, Z3) {
# if(max(log_sigma_para[-4]) < log_sigma_para[4]){res <- Inf}else{
sigma_squ_u <- exp(log_sigma_para[1])  # back-transform
# sigma_squ_v <- exp(log_sigma_para[2])  # back-transform
# sigma_squ_w <- exp(log_sigma_para[3])  # back-transform
sigma_squ_e <- exp(log_sigma_para[2])  # back-transform
# if(min(exp(log_sigma_para)[-4]) < exp(log_sigma_para)[4]){res <- 1e+10}else{
cov_u <- sigma_squ_u * solve(D_region - rho_u * adj_matrix_spase)
# cov_w <- sigma_squ_w * solve(D_micro - rho_w * adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1, cov_u = cov_u,
# Z2 = Z2,
# sigma_squ_v = sigma_squ_v, Z3 = Z3,
# cov_w = cov_w,
sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual,
Z1, Q1_inv = cov_u,
# Z2, sigma_squ_v,
# Z3, Q3_inv = cov_w,
sigma_squ_e)
# Optional penalty on log sigma (encourages moderate values)
# penalty <- lambda * log_sigma_squ_u^2   # mild ridge penalty
# penalty <- -log(sigma_squ_u + 1e-6)
# penalty <- log_sigma_squ_u^2
# penalty <- 1e-3 * sum(log_sigma_para^2)
# penalty <- 1e-3 * max(0, log_sigma_para[4] - min(log_sigma_para[-4]))^2
# sigma_para <- exp(log_sigma_para)
# penalty <-  1e-3*max(0, sigma_para[4] - max(sigma_para[-4]))^2
res <- as.numeric(approx_logdet + resi_V_inv_resi) #+ penalty)
}
st <- Sys.time()
result <- nloptr(
x0 = c(1,1),
eval_f = log_likeli_log_sigma,
lb = rep(log(1e-4), 2),
# ub = rep(log(100), 4),
# lb = rep(1e-6, 3), ub= rep(100, 3),
opts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 1000),
residual = residual,
rho_u = est_rho_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
# sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
et <- Sys.time()
et-st
exp(result$solution)
result$objective
result$status
log_likeli_log_sigma <- function(log_sigma_para, residual, rho_u, #rho_w,
Z1, Z2, Z3) {
if(max(log_sigma_para[1]) < log_sigma_para[2]){res <- 1e+10}else{
sigma_squ_u <- exp(log_sigma_para[1])  # back-transform
# sigma_squ_v <- exp(log_sigma_para[2])  # back-transform
# sigma_squ_w <- exp(log_sigma_para[3])  # back-transform
sigma_squ_e <- exp(log_sigma_para[2])  # back-transform
# if(min(exp(log_sigma_para)[-4]) < exp(log_sigma_para)[4]){res <- 1e+10}else{
cov_u <- sigma_squ_u * solve(D_region - rho_u * adj_matrix_spase)
# cov_w <- sigma_squ_w * solve(D_micro - rho_w * adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1, cov_u = cov_u,
# Z2 = Z2,
# sigma_squ_v = sigma_squ_v, Z3 = Z3,
# cov_w = cov_w,
sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual,
Z1, Q1_inv = cov_u,
# Z2, sigma_squ_v,
# Z3, Q3_inv = cov_w,
sigma_squ_e)
# Optional penalty on log sigma (encourages moderate values)
# penalty <- lambda * log_sigma_squ_u^2   # mild ridge penalty
# penalty <- -log(sigma_squ_u + 1e-6)
# penalty <- log_sigma_squ_u^2
# penalty <- 1e-3 * sum(log_sigma_para^2)
# penalty <- 1e-3 * max(0, log_sigma_para[4] - min(log_sigma_para[-4]))^2
# sigma_para <- exp(log_sigma_para)
# penalty <-  1e-3*max(0, sigma_para[4] - max(sigma_para[-4]))^2
res <- as.numeric(approx_logdet + resi_V_inv_resi) #+ penalty)
}
return(res)
}
st <- Sys.time()
result <- nloptr(
x0 = c(1,1),
eval_f = log_likeli_log_sigma,
lb = rep(log(1e-4), 2),
# ub = rep(log(100), 4),
# lb = rep(1e-6, 3), ub= rep(100, 3),
opts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 1000),
residual = residual,
rho_u = est_rho_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
# sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
et <- Sys.time()
et-st
result$solution
exp(result$solution)
log_likeli_log_sigma <- function(log_sigma_para, residual, rho_u, #rho_w,
Z1, Z2, Z3) {
if(max(log_sigma_para[1]) < log_sigma_para[2]){res <- 1e+10}else{
sigma_squ_u <- exp(log_sigma_para[1])  # back-transform
# sigma_squ_v <- exp(log_sigma_para[2])  # back-transform
# sigma_squ_w <- exp(log_sigma_para[3])  # back-transform
sigma_squ_e <- exp(log_sigma_para[2])  # back-transform
# if(min(exp(log_sigma_para)[-4]) < exp(log_sigma_para)[4]){res <- 1e+10}else{
cov_u <- sigma_squ_u * solve(D_region - rho_u * adj_matrix_spase)
# cov_w <- sigma_squ_w * solve(D_micro - rho_w * adj_mat_micro_spase)
approx_logdet <- slq(V_matvec, nn = nrow(Z1), nv = 30, m = 50,
Z1 = Z1, cov_u = cov_u,
# Z2 = Z2,
# sigma_squ_v = sigma_squ_v, Z3 = Z3,
# cov_w = cov_w,
sigma_squ_e = sigma_squ_e)
resi_V_inv_resi <- t(residual) %*% Vinv_matvec(residual,
Z1, Q1_inv = cov_u,
# Z2, sigma_squ_v,
# Z3, Q3_inv = cov_w,
sigma_squ_e)
# Optional penalty on log sigma (encourages moderate values)
# penalty <- lambda * log_sigma_squ_u^2   # mild ridge penalty
# penalty <- -log(sigma_squ_u + 1e-6)
# penalty <- log_sigma_squ_u^2
# penalty <- 1e-3 * sum(log_sigma_para^2)
# penalty <- 1e-3 * max(0, log_sigma_para[4] - min(log_sigma_para[-4]))^2
# sigma_para <- exp(log_sigma_para)
# penalty <-  1e-3*max(0, sigma_para[4] - max(sigma_para[-4]))^2
penalty <- 0.01 * sum(exp(log_sigma_para))  # or tune penalty strength
res <- as.numeric(approx_logdet + resi_V_inv_resi + penalty)
}
return(res)
}
st <- Sys.time()
st <- Sys.time()
result <- nloptr(
x0 = c(1,1),
eval_f = log_likeli_log_sigma,
lb = rep(log(1e-4), 2),
ub = rep(log(100), 2),
# lb = rep(1e-6, 3), ub= rep(100, 3),
opts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 1000),
residual = residual,
rho_u = est_rho_u,
# sigma_squ_v = est_sigma_squ_v,
# rho_w = est_rho_w,
# sigma_squ_w = est_sigma_squ_w,
# sigma_squ_e = est_sigma_squ_e,
Z1 = Z1, Z2 = Z2, Z3 = Z3)
et <- Sys.time()
et-st
exp(result$solution)
n
L
adj_matrix
rowSums(adj_matrix)
dim(adj_matrix)
indiv
source("~/Desktop/Sooran Kim/!! Research/03 Huilin Li/02 Enviroment-Host-Microbe Interactions/03 R/SpaMM/spaMM_function_rand.R")
library(SGFLMMBayesian)
library(SGFLMMBayesian)
# Load example data included in the package
data(data_example)
X_list <- data_example$X_list
data_list <- data_example$data_list
nbd_list <- data_example$nbd_list
# simulate time point on [0, 1]
t <- seq(from = 0, to = 1, length.out = ncol(X_list[[1]]))
initial_values <- c(0.5, -4.6, 1.1, -0.9, 2.2, -1.4, 0.4, 0.0, 0.1, -2.5, 2.0, -0.2, -1.1, -0.3, 1.0, 0.2, 0.4, 1.4)
res <- posterior_samples_sgflmm(M=8000, initial=initial_values,
proposal_var_fixed=0.001, proposal_var_sigma2=1.1, proposal_var_rand=1, autotune=FALSE,
prior_a=1, prior_b=1, M_auxz = 20,
data_list=data_list, nbd_list = nbd_list,
X_list = X_list, t=t, p=3, basis_type="fourier")
mean(res$samples$alpha[-(1:3000)])
setwd("/Users/Sooran/Desktop/Sooran Kim/!! Research/01 SGFLM/04 SGFLM Paper 3 Dependent Functional Covariate/R code/revision")
getwd()
setwd("SGFLMMBayesian")
devtools::document()
