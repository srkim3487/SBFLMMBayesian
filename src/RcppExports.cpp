// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ext_nb_to_list
List ext_nb_to_list(List nbd_list, int g);
RcppExport SEXP _SGFLMMBayesian_ext_nb_to_list(SEXP nbd_listSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbd_list(nbd_listSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(ext_nb_to_list(nbd_list, g));
    return rcpp_result_gen;
END_RCPP
}
// ext_list_to_mat
arma::mat ext_list_to_mat(List temp, int g);
RcppExport SEXP _SGFLMMBayesian_ext_list_to_mat(SEXP tempSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(ext_list_to_mat(temp, g));
    return rcpp_result_gen;
END_RCPP
}
// ext_list_to_vec
arma::vec ext_list_to_vec(List temp, int g);
RcppExport SEXP _SGFLMMBayesian_ext_list_to_vec(SEXP tempSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(ext_list_to_vec(temp, g));
    return rcpp_result_gen;
END_RCPP
}
// DiagMat
arma::mat DiagMat(int n);
RcppExport SEXP _SGFLMMBayesian_DiagMat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(DiagMat(n));
    return rcpp_result_gen;
END_RCPP
}
// dlaplaceArma
double dlaplaceArma(double x, double location, double scale, bool log);
RcppExport SEXP _SGFLMMBayesian_dlaplaceArma(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dlaplaceArma(x, location, scale, log));
    return rcpp_result_gen;
END_RCPP
}
// dnormArma
double dnormArma(double x, double mean, double sd, bool log);
RcppExport SEXP _SGFLMMBayesian_dnormArma(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormArma(x, mean, sd, log));
    return rcpp_result_gen;
END_RCPP
}
// dmvnormArma
double dmvnormArma(arma::vec x, arma::vec mean, arma::mat sigma);
RcppExport SEXP _SGFLMMBayesian_dmvnormArma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnormArma(x, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dnormArmaVec
double dnormArmaVec(arma::vec betaj, double mu, double sigma, bool log);
RcppExport SEXP _SGFLMMBayesian_dnormArmaVec(SEXP betajSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type betaj(betajSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormArmaVec(betaj, mu, sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _SGFLMMBayesian_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnormRcpp
double rtruncnormRcpp(int n, double a, double b, double mean, double sd);
RcppExport SEXP _SGFLMMBayesian_rtruncnormRcpp(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnormRcpp(n, a, b, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dinvgammaArma
double dinvgammaArma(double x, double shape, double scale, bool take_log);
RcppExport SEXP _SGFLMMBayesian_dinvgammaArma(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvgammaArma(x, shape, scale, take_log));
    return rcpp_result_gen;
END_RCPP
}
// rinvgammaArma
arma::vec rinvgammaArma(int n, double shape, double scale);
RcppExport SEXP _SGFLMMBayesian_rinvgammaArma(SEXP nSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgammaArma(n, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// cell2nb_rcpp
List cell2nb_rcpp(int nrow, int ncol, int torus);
RcppExport SEXP _SGFLMMBayesian_cell2nb_rcpp(SEXP nrowSEXP, SEXP ncolSEXP, SEXP torusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type torus(torusSEXP);
    rcpp_result_gen = Rcpp::wrap(cell2nb_rcpp(nrow, ncol, torus));
    return rcpp_result_gen;
END_RCPP
}
// s1s2_rcpp
double s1s2_rcpp(List nbd_index, arma::vec& data);
RcppExport SEXP _SGFLMMBayesian_s1s2_rcpp(SEXP nbd_indexSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbd_index(nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(s1s2_rcpp(nbd_index, data));
    return rcpp_result_gen;
END_RCPP
}
// gibbsSampling_dd
arma::vec gibbsSampling_dd(List sub_nbd_index, arma::mat& sub_Xstar, double alpha, arma::vec betaj, double eta, double u_g, arma::vec ini_data, int M);
RcppExport SEXP _SGFLMMBayesian_gibbsSampling_dd(SEXP sub_nbd_indexSEXP, SEXP sub_XstarSEXP, SEXP alphaSEXP, SEXP betajSEXP, SEXP etaSEXP, SEXP u_gSEXP, SEXP ini_dataSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sub_nbd_index(sub_nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sub_Xstar(sub_XstarSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj(betajSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type u_g(u_gSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ini_data(ini_dataSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsSampling_dd(sub_nbd_index, sub_Xstar, alpha, betaj, eta, u_g, ini_data, M));
    return rcpp_result_gen;
END_RCPP
}
// neg_SAE_dd
double neg_SAE_dd(List sub_nbd_index, arma::mat& sub_Xstar, arma::vec sub_data, double eta_current, double alpha_current, arma::vec betaj_current, double u_g, double s1s2);
RcppExport SEXP _SGFLMMBayesian_neg_SAE_dd(SEXP sub_nbd_indexSEXP, SEXP sub_XstarSEXP, SEXP sub_dataSEXP, SEXP eta_currentSEXP, SEXP alpha_currentSEXP, SEXP betaj_currentSEXP, SEXP u_gSEXP, SEXP s1s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sub_nbd_index(sub_nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sub_Xstar(sub_XstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sub_data(sub_dataSEXP);
    Rcpp::traits::input_parameter< double >::type eta_current(eta_currentSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_current(alpha_currentSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_current(betaj_currentSEXP);
    Rcpp::traits::input_parameter< double >::type u_g(u_gSEXP);
    Rcpp::traits::input_parameter< double >::type s1s2(s1s2SEXP);
    rcpp_result_gen = Rcpp::wrap(neg_SAE_dd(sub_nbd_index, sub_Xstar, sub_data, eta_current, alpha_current, betaj_current, u_g, s1s2));
    return rcpp_result_gen;
END_RCPP
}
// u_DMH_dd
double u_DMH_dd(arma::mat subX, arma::vec sub_data, List sub_nbd_index, int p, arma::mat basis, double eta_current, double alpha_current, arma::vec betaj_current, double u_g_current, double sigmau_squ, double s_vec, int M_auxz);
RcppExport SEXP _SGFLMMBayesian_u_DMH_dd(SEXP subXSEXP, SEXP sub_dataSEXP, SEXP sub_nbd_indexSEXP, SEXP pSEXP, SEXP basisSEXP, SEXP eta_currentSEXP, SEXP alpha_currentSEXP, SEXP betaj_currentSEXP, SEXP u_g_currentSEXP, SEXP sigmau_squSEXP, SEXP s_vecSEXP, SEXP M_auxzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type subX(subXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sub_data(sub_dataSEXP);
    Rcpp::traits::input_parameter< List >::type sub_nbd_index(sub_nbd_indexSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type eta_current(eta_currentSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_current(alpha_currentSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_current(betaj_currentSEXP);
    Rcpp::traits::input_parameter< double >::type u_g_current(u_g_currentSEXP);
    Rcpp::traits::input_parameter< double >::type sigmau_squ(sigmau_squSEXP);
    Rcpp::traits::input_parameter< double >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    rcpp_result_gen = Rcpp::wrap(u_DMH_dd(subX, sub_data, sub_nbd_index, p, basis, eta_current, alpha_current, betaj_current, u_g_current, sigmau_squ, s_vec, M_auxz));
    return rcpp_result_gen;
END_RCPP
}
// fixed_DMH_dd
double fixed_DMH_dd(arma::mat subX, arma::vec sub_data, List sub_nbd_index, int p, arma::mat basis, double eta_current, double eta_proposed, double alpha_current, double alpha_proposed, arma::vec betaj_current, arma::vec betaj_proposed, double u_g_current, int M_auxz);
RcppExport SEXP _SGFLMMBayesian_fixed_DMH_dd(SEXP subXSEXP, SEXP sub_dataSEXP, SEXP sub_nbd_indexSEXP, SEXP pSEXP, SEXP basisSEXP, SEXP eta_currentSEXP, SEXP eta_proposedSEXP, SEXP alpha_currentSEXP, SEXP alpha_proposedSEXP, SEXP betaj_currentSEXP, SEXP betaj_proposedSEXP, SEXP u_g_currentSEXP, SEXP M_auxzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type subX(subXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sub_data(sub_dataSEXP);
    Rcpp::traits::input_parameter< List >::type sub_nbd_index(sub_nbd_indexSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type eta_current(eta_currentSEXP);
    Rcpp::traits::input_parameter< double >::type eta_proposed(eta_proposedSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_current(alpha_currentSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_proposed(alpha_proposedSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_current(betaj_currentSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_proposed(betaj_proposedSEXP);
    Rcpp::traits::input_parameter< double >::type u_g_current(u_g_currentSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    rcpp_result_gen = Rcpp::wrap(fixed_DMH_dd(subX, sub_data, sub_nbd_index, p, basis, eta_current, eta_proposed, alpha_current, alpha_proposed, betaj_current, betaj_proposed, u_g_current, M_auxz));
    return rcpp_result_gen;
END_RCPP
}
// ii_fun
double ii_fun(arma::mat& Xstar, arma::vec data, double alpha, arma::vec betaj);
RcppExport SEXP _SGFLMMBayesian_ii_fun(SEXP XstarSEXP, SEXP dataSEXP, SEXP alphaSEXP, SEXP betajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj(betajSEXP);
    rcpp_result_gen = Rcpp::wrap(ii_fun(Xstar, data, alpha, betaj));
    return rcpp_result_gen;
END_RCPP
}
// gibbsSampling_id
arma::vec gibbsSampling_id(List nbd_index, arma::mat& Xstar, double alpha, arma::vec betaj, double eta, arma::vec ini_data, int M);
RcppExport SEXP _SGFLMMBayesian_gibbsSampling_id(SEXP nbd_indexSEXP, SEXP XstarSEXP, SEXP alphaSEXP, SEXP betajSEXP, SEXP etaSEXP, SEXP ini_dataSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbd_index(nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj(betajSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ini_data(ini_dataSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsSampling_id(nbd_index, Xstar, alpha, betaj, eta, ini_data, M));
    return rcpp_result_gen;
END_RCPP
}
// neg_SAE_id
double neg_SAE_id(List nbd_index, arma::mat& Xstar, arma::vec data, double eta_current, double alpha_current, arma::vec betaj_current, double s1s2);
RcppExport SEXP _SGFLMMBayesian_neg_SAE_id(SEXP nbd_indexSEXP, SEXP XstarSEXP, SEXP dataSEXP, SEXP eta_currentSEXP, SEXP alpha_currentSEXP, SEXP betaj_currentSEXP, SEXP s1s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbd_index(nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type eta_current(eta_currentSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_current(alpha_currentSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_current(betaj_currentSEXP);
    Rcpp::traits::input_parameter< double >::type s1s2(s1s2SEXP);
    rcpp_result_gen = Rcpp::wrap(neg_SAE_id(nbd_index, Xstar, data, eta_current, alpha_current, betaj_current, s1s2));
    return rcpp_result_gen;
END_RCPP
}
// fixed_DMH_id
double fixed_DMH_id(List nbd_index, arma::mat& Xstar, arma::vec data, double eta_current, double eta_proposed, double alpha_current, double alpha_proposed, arma::vec betaj_current, arma::vec betaj_proposed, int M_auxz);
RcppExport SEXP _SGFLMMBayesian_fixed_DMH_id(SEXP nbd_indexSEXP, SEXP XstarSEXP, SEXP dataSEXP, SEXP eta_currentSEXP, SEXP eta_proposedSEXP, SEXP alpha_currentSEXP, SEXP alpha_proposedSEXP, SEXP betaj_currentSEXP, SEXP betaj_proposedSEXP, SEXP M_auxzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbd_index(nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type eta_current(eta_currentSEXP);
    Rcpp::traits::input_parameter< double >::type eta_proposed(eta_proposedSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_current(alpha_currentSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_proposed(alpha_proposedSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_current(betaj_currentSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_proposed(betaj_proposedSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    rcpp_result_gen = Rcpp::wrap(fixed_DMH_id(nbd_index, Xstar, data, eta_current, eta_proposed, alpha_current, alpha_proposed, betaj_current, betaj_proposed, M_auxz));
    return rcpp_result_gen;
END_RCPP
}
// fixed_di_fun
double fixed_di_fun(arma::mat subX, arma::vec sub_data, arma::mat basis, double alpha, arma::vec betaj, double u_g);
RcppExport SEXP _SGFLMMBayesian_fixed_di_fun(SEXP subXSEXP, SEXP sub_dataSEXP, SEXP basisSEXP, SEXP alphaSEXP, SEXP betajSEXP, SEXP u_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type subX(subXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sub_data(sub_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj(betajSEXP);
    Rcpp::traits::input_parameter< double >::type u_g(u_gSEXP);
    rcpp_result_gen = Rcpp::wrap(fixed_di_fun(subX, sub_data, basis, alpha, betaj, u_g));
    return rcpp_result_gen;
END_RCPP
}
// u_MH_di
double u_MH_di(arma::mat subX, arma::vec sub_data, arma::mat basis, double alpha_current, arma::vec betaj_current, double u_g_current, double sigmau_squ, double s_vec, int M_auxz);
RcppExport SEXP _SGFLMMBayesian_u_MH_di(SEXP subXSEXP, SEXP sub_dataSEXP, SEXP basisSEXP, SEXP alpha_currentSEXP, SEXP betaj_currentSEXP, SEXP u_g_currentSEXP, SEXP sigmau_squSEXP, SEXP s_vecSEXP, SEXP M_auxzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type subX(subXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sub_data(sub_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_current(alpha_currentSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaj_current(betaj_currentSEXP);
    Rcpp::traits::input_parameter< double >::type u_g_current(u_g_currentSEXP);
    Rcpp::traits::input_parameter< double >::type sigmau_squ(sigmau_squSEXP);
    Rcpp::traits::input_parameter< double >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    rcpp_result_gen = Rcpp::wrap(u_MH_di(subX, sub_data, basis, alpha_current, betaj_current, u_g_current, sigmau_squ, s_vec, M_auxz));
    return rcpp_result_gen;
END_RCPP
}
// rw_dd
List rw_dd(int M, arma::vec initial, double tune_fixed, double tune_sigmau2, double tune_u, bool autotune, List true_X, List data, List nbd_list, int p, arma::mat basis, int M_auxz, int G, double prior_a, double prior_b);
RcppExport SEXP _SGFLMMBayesian_rw_dd(SEXP MSEXP, SEXP initialSEXP, SEXP tune_fixedSEXP, SEXP tune_sigmau2SEXP, SEXP tune_uSEXP, SEXP autotuneSEXP, SEXP true_XSEXP, SEXP dataSEXP, SEXP nbd_listSEXP, SEXP pSEXP, SEXP basisSEXP, SEXP M_auxzSEXP, SEXP GSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type tune_fixed(tune_fixedSEXP);
    Rcpp::traits::input_parameter< double >::type tune_sigmau2(tune_sigmau2SEXP);
    Rcpp::traits::input_parameter< double >::type tune_u(tune_uSEXP);
    Rcpp::traits::input_parameter< bool >::type autotune(autotuneSEXP);
    Rcpp::traits::input_parameter< List >::type true_X(true_XSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type nbd_list(nbd_listSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_b(prior_bSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_dd(M, initial, tune_fixed, tune_sigmau2, tune_u, autotune, true_X, data, nbd_list, p, basis, M_auxz, G, prior_a, prior_b));
    return rcpp_result_gen;
END_RCPP
}
// rw_di
List rw_di(int M, arma::vec initial, double tune_fixed, double tune_sigmau2, double tune_u, bool autotune, List true_X, List data, int p, arma::mat basis, int M_auxz, int G, double prior_a, double prior_b);
RcppExport SEXP _SGFLMMBayesian_rw_di(SEXP MSEXP, SEXP initialSEXP, SEXP tune_fixedSEXP, SEXP tune_sigmau2SEXP, SEXP tune_uSEXP, SEXP autotuneSEXP, SEXP true_XSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP basisSEXP, SEXP M_auxzSEXP, SEXP GSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type tune_fixed(tune_fixedSEXP);
    Rcpp::traits::input_parameter< double >::type tune_sigmau2(tune_sigmau2SEXP);
    Rcpp::traits::input_parameter< double >::type tune_u(tune_uSEXP);
    Rcpp::traits::input_parameter< bool >::type autotune(autotuneSEXP);
    Rcpp::traits::input_parameter< List >::type true_X(true_XSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_b(prior_bSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_di(M, initial, tune_fixed, tune_sigmau2, tune_u, autotune, true_X, data, p, basis, M_auxz, G, prior_a, prior_b));
    return rcpp_result_gen;
END_RCPP
}
// rw_id
List rw_id(int M, arma::vec initial, double tune_fixed, bool autotune, List nbd_index, arma::mat& Xstar, arma::vec data_vec, int p, int M_auxz);
RcppExport SEXP _SGFLMMBayesian_rw_id(SEXP MSEXP, SEXP initialSEXP, SEXP tune_fixedSEXP, SEXP autotuneSEXP, SEXP nbd_indexSEXP, SEXP XstarSEXP, SEXP data_vecSEXP, SEXP pSEXP, SEXP M_auxzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type tune_fixed(tune_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type autotune(autotuneSEXP);
    Rcpp::traits::input_parameter< List >::type nbd_index(nbd_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data_vec(data_vecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type M_auxz(M_auxzSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_id(M, initial, tune_fixed, autotune, nbd_index, Xstar, data_vec, p, M_auxz));
    return rcpp_result_gen;
END_RCPP
}
// rw_ii
List rw_ii(int M, arma::vec initial, double tune_fixed, bool autotune, arma::mat& Xstar, arma::vec data_vec, int p);
RcppExport SEXP _SGFLMMBayesian_rw_ii(SEXP MSEXP, SEXP initialSEXP, SEXP tune_fixedSEXP, SEXP autotuneSEXP, SEXP XstarSEXP, SEXP data_vecSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type tune_fixed(tune_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type autotune(autotuneSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xstar(XstarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data_vec(data_vecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_ii(M, initial, tune_fixed, autotune, Xstar, data_vec, p));
    return rcpp_result_gen;
END_RCPP
}
// varArma
arma::mat varArma(double tau, double rho, arma::mat Dv, arma::mat nbd_mat);
RcppExport SEXP _SGFLMMBayesian_varArma(SEXP tauSEXP, SEXP rhoSEXP, SEXP DvSEXP, SEXP nbd_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dv(DvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nbd_mat(nbd_matSEXP);
    rcpp_result_gen = Rcpp::wrap(varArma(tau, rho, Dv, nbd_mat));
    return rcpp_result_gen;
END_RCPP
}
// estX_fun_k
List estX_fun_k(int M, arma::vec Xstar_trun, arma::mat Dv, arma::mat nbd_mat, arma::vec initial, double S_tau, double S_rho, bool autotune);
RcppExport SEXP _SGFLMMBayesian_estX_fun_k(SEXP MSEXP, SEXP Xstar_trunSEXP, SEXP DvSEXP, SEXP nbd_matSEXP, SEXP initialSEXP, SEXP S_tauSEXP, SEXP S_rhoSEXP, SEXP autotuneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xstar_trun(Xstar_trunSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dv(DvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nbd_mat(nbd_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type S_tau(S_tauSEXP);
    Rcpp::traits::input_parameter< double >::type S_rho(S_rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type autotune(autotuneSEXP);
    rcpp_result_gen = Rcpp::wrap(estX_fun_k(M, Xstar_trun, Dv, nbd_mat, initial, S_tau, S_rho, autotune));
    return rcpp_result_gen;
END_RCPP
}
// estX_fun_k_w_mu
List estX_fun_k_w_mu(int M, arma::vec Xstar_trun, arma::mat Dv, arma::mat nbd_mat, arma::vec initial, double S_tau, double S_rho, bool autotune);
RcppExport SEXP _SGFLMMBayesian_estX_fun_k_w_mu(SEXP MSEXP, SEXP Xstar_trunSEXP, SEXP DvSEXP, SEXP nbd_matSEXP, SEXP initialSEXP, SEXP S_tauSEXP, SEXP S_rhoSEXP, SEXP autotuneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xstar_trun(Xstar_trunSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dv(DvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nbd_mat(nbd_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type S_tau(S_tauSEXP);
    Rcpp::traits::input_parameter< double >::type S_rho(S_rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type autotune(autotuneSEXP);
    rcpp_result_gen = Rcpp::wrap(estX_fun_k_w_mu(M, Xstar_trun, Dv, nbd_mat, initial, S_tau, S_rho, autotune));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_SGFLMMBayesian_ext_nb_to_list", (DL_FUNC) &_SGFLMMBayesian_ext_nb_to_list, 2},
    {"_SGFLMMBayesian_ext_list_to_mat", (DL_FUNC) &_SGFLMMBayesian_ext_list_to_mat, 2},
    {"_SGFLMMBayesian_ext_list_to_vec", (DL_FUNC) &_SGFLMMBayesian_ext_list_to_vec, 2},
    {"_SGFLMMBayesian_DiagMat", (DL_FUNC) &_SGFLMMBayesian_DiagMat, 1},
    {"_SGFLMMBayesian_dlaplaceArma", (DL_FUNC) &_SGFLMMBayesian_dlaplaceArma, 4},
    {"_SGFLMMBayesian_dnormArma", (DL_FUNC) &_SGFLMMBayesian_dnormArma, 4},
    {"_SGFLMMBayesian_dmvnormArma", (DL_FUNC) &_SGFLMMBayesian_dmvnormArma, 3},
    {"_SGFLMMBayesian_dnormArmaVec", (DL_FUNC) &_SGFLMMBayesian_dnormArmaVec, 4},
    {"_SGFLMMBayesian_mvrnormArma", (DL_FUNC) &_SGFLMMBayesian_mvrnormArma, 3},
    {"_SGFLMMBayesian_rtruncnormRcpp", (DL_FUNC) &_SGFLMMBayesian_rtruncnormRcpp, 5},
    {"_SGFLMMBayesian_dinvgammaArma", (DL_FUNC) &_SGFLMMBayesian_dinvgammaArma, 4},
    {"_SGFLMMBayesian_rinvgammaArma", (DL_FUNC) &_SGFLMMBayesian_rinvgammaArma, 3},
    {"_SGFLMMBayesian_cell2nb_rcpp", (DL_FUNC) &_SGFLMMBayesian_cell2nb_rcpp, 3},
    {"_SGFLMMBayesian_s1s2_rcpp", (DL_FUNC) &_SGFLMMBayesian_s1s2_rcpp, 2},
    {"_SGFLMMBayesian_gibbsSampling_dd", (DL_FUNC) &_SGFLMMBayesian_gibbsSampling_dd, 8},
    {"_SGFLMMBayesian_neg_SAE_dd", (DL_FUNC) &_SGFLMMBayesian_neg_SAE_dd, 8},
    {"_SGFLMMBayesian_u_DMH_dd", (DL_FUNC) &_SGFLMMBayesian_u_DMH_dd, 12},
    {"_SGFLMMBayesian_fixed_DMH_dd", (DL_FUNC) &_SGFLMMBayesian_fixed_DMH_dd, 13},
    {"_SGFLMMBayesian_ii_fun", (DL_FUNC) &_SGFLMMBayesian_ii_fun, 4},
    {"_SGFLMMBayesian_gibbsSampling_id", (DL_FUNC) &_SGFLMMBayesian_gibbsSampling_id, 7},
    {"_SGFLMMBayesian_neg_SAE_id", (DL_FUNC) &_SGFLMMBayesian_neg_SAE_id, 7},
    {"_SGFLMMBayesian_fixed_DMH_id", (DL_FUNC) &_SGFLMMBayesian_fixed_DMH_id, 10},
    {"_SGFLMMBayesian_fixed_di_fun", (DL_FUNC) &_SGFLMMBayesian_fixed_di_fun, 6},
    {"_SGFLMMBayesian_u_MH_di", (DL_FUNC) &_SGFLMMBayesian_u_MH_di, 9},
    {"_SGFLMMBayesian_rw_dd", (DL_FUNC) &_SGFLMMBayesian_rw_dd, 15},
    {"_SGFLMMBayesian_rw_di", (DL_FUNC) &_SGFLMMBayesian_rw_di, 14},
    {"_SGFLMMBayesian_rw_id", (DL_FUNC) &_SGFLMMBayesian_rw_id, 9},
    {"_SGFLMMBayesian_rw_ii", (DL_FUNC) &_SGFLMMBayesian_rw_ii, 7},
    {"_SGFLMMBayesian_varArma", (DL_FUNC) &_SGFLMMBayesian_varArma, 4},
    {"_SGFLMMBayesian_estX_fun_k", (DL_FUNC) &_SGFLMMBayesian_estX_fun_k, 8},
    {"_SGFLMMBayesian_estX_fun_k_w_mu", (DL_FUNC) &_SGFLMMBayesian_estX_fun_k_w_mu, 8},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SGFLMMBayesian(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
